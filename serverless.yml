service: health2fit

provider:
  name: aws
  runtime: python3.8
  region: us-west-2 # ap-notheast-1

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    noDeploy: []
    # dockerizePip: true

package:
  exclude:
    - .git/**
    - .gitignore
    - README.md
    - .envrc
    - event.json

functions:
  # oauth:
  #   handler: handler.oauthHandler
  #   events:
  #     - http:
  #         path: oauth
  #         method: get
  # token:
  #   handler: handler.tokenHandler
  #   events:
  #     - http:
  #         path: token
  #         method: get
  daily_health_status:
    handler: handler.daily_health_status
    events:
      - http:
          path: healthstatus/today
          method: get
    environment:
      HEALTH_CLIENT_ID: ${env:HEALTH_CLIENT_ID}
      HEALTH_CLIENT_SECRET: ${env:HEALTH_CLIENT_SECRET}
      HEALTH_ACCESS_TOKEN: ${env:HEALTH_ACCESS_TOKEN}
  #    The following are a few example events you can configure
  #    NOTE: Please make sure to change your handler code to work with those events
  #    Check the event documentation for details
  #    events:
  #      - http:
  #          path: users/create
  #          method: get
  #      - websocket: $connect
  #      - s3: ${env:BUCKET}
  #      - schedule: rate(10 minutes)
  #      - sns: greeter-topic
  #      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
  #      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
  #      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
  #      - iot:
  #          sql: "SELECT * FROM 'some_topic'"
  #      - cloudwatchEvent:
  #          event:
  #            source:
  #              - "aws.ec2"
  #            detail-type:
  #              - "EC2 Instance State-change Notification"
  #            detail:
  #              state:
  #                - pending
  #      - cloudwatchLog: '/aws/lambda/hello'
  #      - cognitoUserPool:
  #          pool: MyUserPool
  #          trigger: PreSignUp
  #      - alb:
  #          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
  #          priority: 1
  #          conditions:
  #            host: example.com
  #            path: /hello
  #    Define function environment variables here
  #    environment:
  #      variable2: value2
# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
